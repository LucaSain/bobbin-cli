use clap::{Arg, App, SubCommand};

pub fn app() -> App<'static, 'static> {
    App::new("bobbin")
        .version("0.1")
        .author("Jonathan Soo <jcsoo@agora.com>")
        .about("Debug Probe Manager")
        .arg(Arg::with_name("verbose").long("verbose").short("v").help("Displays verbose output"))
        .arg(Arg::with_name("quiet").long("quiet").short("q").help("Suppress verbose output"))
        .arg(Arg::with_name("config").long("config").short("c").help("Specify the bobbin config file path"))
        .arg(Arg::with_name("device").long("device").short("d").takes_value(true).help("Specify a device ID prefix for filtering"))
        // .arg(Arg::with_name("vendor-id").long("vendor-id").takes_value(true))
        // .arg(Arg::with_name("product-id").long("product-id").takes_value(true))
        // .arg(Arg::with_name("serial-number").long("serial-number").takes_value(true))
        .subcommand(SubCommand::with_name("list")
            .arg(Arg::with_name("all").long("all").help("Display all USB devices"))
            .about("Display a list of debug devices")
        )
        .subcommand(SubCommand::with_name("info").about("Display detailed information about selected debug devices"))
        .subcommand(SubCommand::with_name("build")
            .arg(Arg::with_name("target").long("target").takes_value(true).help("Pass a --target parameter to xargo"))
            .arg(Arg::with_name("bin").long("bin").takes_value(true).help("Pass a --bin parameter to xargo"))
            .arg(Arg::with_name("example").long("example").takes_value(true).help("Pass a --example parameter to xargo"))
            .arg(Arg::with_name("release").long("release").help("Pass a --release parameter to xargo"))
            .arg(Arg::with_name("features").long("features").help("Pass a --features parameter to xargo"))
            .arg(Arg::with_name("xargo").long("xargo").help("Use xargo for the build"))
            .arg(Arg::with_name("make").long("make").takes_value(true).multiple(true).min_values(0)
                .help("Use make for the build, optionally providing additional parameters")
            )
            .about("Build an application using xargo or make.")
        )
        .subcommand(SubCommand::with_name("load")
            .arg(Arg::with_name("binary").long("binary").takes_value(true).help("Specify the path of the binary file to load."))
            .arg(Arg::with_name("target").long("target").takes_value(true).help("Pass a --target parameter to xargo"))
            .arg(Arg::with_name("bin").long("bin").takes_value(true).help("Pass a --bin parameter to xargo"))
            .arg(Arg::with_name("example").long("example").takes_value(true).help("Pass a --example parameter to xargo"))
            .arg(Arg::with_name("release").long("release").help("Pass a --release parameter to xargo"))
            .arg(Arg::with_name("features").long("features").help("Pass a --features parameter to xargo"))
            .arg(Arg::with_name("xargo").long("xargo").help("Use xargo for the build"))
            .arg(Arg::with_name("make").long("make").takes_value(true).multiple(true).min_values(0)
                .help("Use make for the build, optionally providing additional parameters")            
            )
            .arg(Arg::with_name("no-build").long("no-build").help("Don't build before attempting to load."))
            .about("Load an application onto the selected device after a successful build.")
        )
        .subcommand(SubCommand::with_name("run")
            .arg(Arg::with_name("binary").long("binary").takes_value(true).help("Specify the path of the binary file to load."))
            .arg(Arg::with_name("target").long("target").takes_value(true).help("Pass a --bin parameter to xargo"))
            .arg(Arg::with_name("bin").long("bin").takes_value(true).help("Pass a --bin parameter to xargo"))
            .arg(Arg::with_name("example").long("example").takes_value(true).help("Pass a --example parameter to xargo"))
            .arg(Arg::with_name("release").long("release").help("Pass a --release parameter to xargo"))
            .arg(Arg::with_name("features").long("features").help("Pass a --features parameter to xargo"))
            .arg(Arg::with_name("xargo").long("xargo").help("Use xargo for the build"))
            .arg(Arg::with_name("make").long("make").takes_value(true).multiple(true).min_values(0)
                .help("Use make for the build, optionally providing additional parameters")                        
            )
            .arg(Arg::with_name("no-build").long("no-build").help("Don't build before attempting to load."))
            .arg(Arg::with_name("console").long("console").min_values(0).max_values(1)
                .help("Specify the path to the serial device for the selected device.")
            )
            .arg(Arg::with_name("noconsole").long("no-console").help("Don't attempt to open a serial console after running."))
            .arg(Arg::with_name("itm").long("itm").help("Display the ITM trace output after running."))
            .about("Load and run an application on the selected device after a successful build.")
        )
        .subcommand(SubCommand::with_name("halt").about("Halt the selected device."))
        .subcommand(SubCommand::with_name("resume")
            .arg(Arg::with_name("console").long("console").min_values(0).max_values(1)
                .help("Specify the path to the serial device for the selected device."))
            .arg(Arg::with_name("noconsole").long("no-console")
                .help("Don't attempt to open a serial console after resuming.")
            )
            .about("Resume the selected device.")
        )
        .subcommand(SubCommand::with_name("reset")
            .arg(Arg::with_name("run").long("run").help("Run the device after reset."))
            .arg(Arg::with_name("halt").long("halt").help("Halt the device after reset."))
            .arg(Arg::with_name("init").long("init").help("Initialize the device after reset."))
            .arg(Arg::with_name("console").long("console").min_values(0).max_values(1)
                .help("Specify the path to the serial device for the selected device.")
            )
            .arg(Arg::with_name("noconsole").long("no-console")
                .help("Don't attempt to open a serial console after resuming.")
            )
            .about("Reset the selected device.")
        )
        .subcommand(SubCommand::with_name("console")
            .arg(Arg::with_name("console").long("console").min_values(0).max_values(1)
                .help("Specify the path to the serial device for the selected device.")
            )
            .about("View the serial output of the selected device.")
        )
        .subcommand(SubCommand::with_name("itm")
            .about("View the ITM output of the selected device.")
        )
        .subcommand(SubCommand::with_name("screen")
            .arg(Arg::with_name("console").long("console").min_values(0).max_values(1)
                .help("Specify the path to the serial device for the selected device.")
            )
            .about("Connect to the serial port of the selected device using screen.")
        )        
        .subcommand(SubCommand::with_name("openocd")
            .about("Start OpenOCD for the selected device")
        )
        .subcommand(SubCommand::with_name("gdb")
            .arg(Arg::with_name("binary").long("binary").takes_value(true).help("Specify the path of the binary file to load."))
            .arg(Arg::with_name("target").long("target").takes_value(true).help("Pass a --bin parameter to xargo"))
            .arg(Arg::with_name("bin").long("bin").takes_value(true).help("Pass a --bin parameter to xargo"))
            .arg(Arg::with_name("example").long("example").takes_value(true).help("Pass a --example parameter to xargo"))
            .arg(Arg::with_name("release").long("release").help("Pass a --release parameter to xargo"))
            .arg(Arg::with_name("features").long("features").help("Pass a --features parameter to xargo"))
            .arg(Arg::with_name("xargo").long("xargo").help("Use xargo for the build"))
            .arg(Arg::with_name("make").long("make").takes_value(true).multiple(true).min_values(0)
                .help("Use make for the build, optionally providing additional parameters")                        
            )
            .arg(Arg::with_name("no-build").long("no-build").help("Don't build before attempting to load."))
            .about("Start gdb using the build output as the target.")
        )
        //.subcommand(SubCommand::with_name("objdump"))
}